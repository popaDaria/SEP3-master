@page "/MakeAppointment"
@attribute [Authorize(Roles = "patient")]
@using SEP3.Model
@using SEP3.Data
@using System.Text
@inject ICloudHospitalService CloudHospitalService
@inject ICloudDoctorHospitalService CloudDoctorHospitalService
@inject ICloudAppointmentService CloudAppointmentService
@inject ICloudUserService CloudUserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICloudAvailableDayService CloudAvailableDayService
@inject ICloudMedicalRecordService CloudMedicalRecordService


<h1 style="font-size: 56px; font-weight: bold; color: #0B4E58">Schedule a new Appointment</h1>
<EditForm Model="@appointmentToAdd" OnValidSubmit="Add">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="formBlock">
        <label>Hospital:
            <InputSelect @bind-Value="@hospitalString">
                <option></option>
                @foreach (var hos in @allHospitals)
                {
                    <option>@hos.id : @hos.name</option>
                }
            </InputSelect>
        </label>
        <br/>
        <input type="button" class="btn btn-info" name="selectHospital" value="Confirm Hospital" @onclick="@SelectHospital"/>
        
        <div style="@display1">
            <label>Department:
                <InputSelect @bind-Value="@deptString">
                    <option></option>
                    @foreach (var hos in @allDepartments)
                    {
                        <option>@hos</option>
                    }
                </InputSelect>
            </label>
            
            <input type="button" class="btn btn-info" name="selectDepartment" value="Confirm Department" @onclick="@SelectDepartment"/>
        </div>
        
        <div style="@display2">
            <label>Doctor:
                <InputSelect @bind-Value="@docString">
                    <option></option>
                    @foreach (var hos in @allDoctors)
                    {
                        <option>@hos.idNr : @hos.firstname @hos.lastname</option>
                    }
                </InputSelect>
            </label>
                        
            <input type="button" class="btn btn-info" name="selectDoctor" value="Confirm Doctor" @onclick="@SelectDoctor"/>
        </div>
        
        <div style="@display3">
            @* <label style="color: red">*Please select an available date for the doctor</label> *@
            <br/>
            <label style="color: #0f6674" class="oi oi-bell">
                @labelContent
            </label>
            <br/>
            <label>Start Time:<input type="datetime-local" @onchange="@AddLabel"></label>
            <br/>
            <label style="color: #0f6674" class="oi oi-bell">
                @sameDateWarning
            </label>
            <br/>
            <label>End Time:<input type="datetime-local" @onchange="@SelectEndTime"></label>
            <br/>
            <label>Summary:<input type="text" @bind-value="@appointmentToAdd.summary"></label>
            <br/>
        </div>
        
    </div>
    <input type="submit" class="btn btn-primary" value="Submit"/>
    <div class="alert alert-success mt-2" style="@display">Registration was successful!</div>
    <div class="alert alert-danger mt-2" style="@displayError">@ErrorMessage</div>
</EditForm>



@code {
    Appointment appointmentToAdd { get; set; }
    
    string hospitalString { get; set; }
    int hosId { get; set; }
    List<Hospital> allHospitals { get; set; } = new List<Hospital>();
    List<string> allDepartments { get; set; } = new List<string>();
    string deptString { get; set; } 
    
    string display1 { get; set; }
    string display2 { get; set; }
    string display3 { get; set; }
    string display = "display: none";
    string displayError = "display: none";
    public string ErrorMessage { get; set; }
    string labelContent { get; set; } = "";
    string sameDateWarning { get; set; } = "";
    
    IList<User> allDoctors { get; set; } = new List<User>();
    string docString { get; set; }
    int docId { get; set; }
    int patId { get; set; }
    List<AvailableDay> AvailableDays { get; set; } = new List<AvailableDay>();
    AvailableDay DoctorDay { get; set; }
    bool ok { get; set; } = false;
    
    List<Appointment> ApptForPatient { get; set; } = new List<Appointment>();
    List<Appointment> ApptForDoctor { get; set; } = new List<Appointment>();

    protected override async Task OnInitializedAsync()
    {
        appointmentToAdd = new Appointment();
        allHospitals = await CloudHospitalService.GetAllHospitals();
        display1 = "display: none";
        display2 = "display: none";
        display3 = "display: none";
        patId = Int32.Parse(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Claims.ToList()[0].Value);
        ApptForPatient = await CloudAppointmentService.GetAllForPatient(patId);
    }

    private async Task SelectHospital()
    {
        hosId = Int32.Parse(hospitalString.Split(" ")[0]);
        allDepartments = await CloudHospitalService.GetAllDepartments(hosId);
        display1 = "display: block";
    }

    private async Task SelectDepartment()
    {
        allDoctors = await CloudDoctorHospitalService.GetAllDoctorsForDepartment(hosId, deptString);
        display2 = "display: block";
    }

    private async Task SelectDoctor()
    {
        docId = Int32.Parse(docString.Split(" ")[0]);
        AvailableDays = await CloudAvailableDayService.GetAvailableDays(docId);
        List<AvailableDay> daysToRemove = new List<AvailableDay>();

        foreach (var day in AvailableDays)
        {
            if (day.AvailableDate.Date.CompareTo(DateTime.Today) < 0)
            {
                daysToRemove.Add(day);
            }
        }
        foreach (var day in daysToRemove)
        {
            AvailableDays.Remove(day);
        }
        
        
        ApptForDoctor = await CloudAppointmentService.GetAllForDoctor(docId);
        display3 = "display: block";
    //labelContent = "Doctor's schedule:";
        if (AvailableDays.Count == 0)
        {
            displayError = "display : block";
            ErrorMessage = "Warning: The doctor you have selected has no upcoming available days registered in the system!";
            ok = true;
        }
        else
        {
            displayError = "display : none";
        }
    }
    
    private void AddLabel(ChangeEventArgs e)
    {
        bool found = false;
    //appointmentToAdd.appointmentDate = (DateTime)e.Value;
        Console.WriteLine(e.Value);
        if (e.Value != null)
        {
            string result = (string) e.Value;
            string[] contents = result.Split("T");
            string[] dateContents = contents[0].Split("-");
            string[] timeContents = contents[1].Split(":");
            appointmentToAdd.startTime = new DateTime(Int32.Parse(dateContents[0]),Int32.Parse(dateContents[1]),Int32.Parse(dateContents[2]), 
                Int32.Parse(timeContents[0]),Int32.Parse(timeContents[1]),0 );
        }
        foreach (var availableDay in AvailableDays)
        {
            if (availableDay.AvailableDate.Day == appointmentToAdd.startTime.Day &&
                availableDay.AvailableDate.Month == appointmentToAdd.startTime.Month &&
                availableDay.AvailableDate.Year == appointmentToAdd.startTime.Year)
            {
                labelContent = "The Working hours are: " + availableDay.StartTime.TimeOfDay.ToString() + " - " + availableDay.EndTime.TimeOfDay.ToString();
                found = true;
            }
        }
        if (!found)
        {
            labelContent = "Not an available date!";
        }
    }

    bool okDates { get; set; } = false;

    private void SelectEndTime(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            string result = (string) e.Value;
            string[] contents = result.Split("T");
            string[] dateContents = contents[0].Split("-");
            string[] timeContents = contents[1].Split(":");
            appointmentToAdd.endTime = new DateTime(Int32.Parse(dateContents[0]),Int32.Parse(dateContents[1]),Int32.Parse(dateContents[2]), 
                Int32.Parse(timeContents[0]),Int32.Parse(timeContents[1]),0 );
            if (!appointmentToAdd.endTime.Date.Equals(appointmentToAdd.startTime.Date))
            {
                sameDateWarning = "End Time of appointment must have the same date as Start Time!";
                okDates = false;
            }
            else
            {
                if (appointmentToAdd.startTime.TimeOfDay.TotalMinutes < appointmentToAdd.endTime.TimeOfDay.TotalMinutes)
                {
                    sameDateWarning = "";
                    okDates = true;
                }
                else
                {
                    sameDateWarning = "End Time of appointment must be after Start Time of appointment!";
                    okDates = false;
                }
            }
        }    
    }
    
    private async Task Add()
    {
        try
        {
            appointmentToAdd.doctorId = docId;
            appointmentToAdd.patientId = patId;

            foreach (var availableDay in AvailableDays)
            {
                if (availableDay.AvailableDate.Day == appointmentToAdd.startTime.Day &&
                    availableDay.AvailableDate.Month == appointmentToAdd.startTime.Month &&
                    availableDay.AvailableDate.Year == appointmentToAdd.startTime.Year)
                {
                    ok = true;
                    DoctorDay = availableDay;
                }
            }
            if (ok)
            {
                if (AvailableDays.Count != 0)
                {
                    if (DoctorDay.AppointmentNr != 0)
                    {
                        if (appointmentToAdd.startTime.TimeOfDay.TotalMilliseconds >= DoctorDay.StartTime.TimeOfDay.TotalMilliseconds && 
                            appointmentToAdd.endTime.TimeOfDay.TotalMilliseconds < DoctorDay.EndTime.TimeOfDay.TotalMilliseconds)
                        {
                            await AddAppointment();
                        }
                        else
                        {
                            displayError = "display : block";
                            ErrorMessage = "Selected time does not conform to doctor's schedule. Please select another time.";
                        }
                    }
                    else
                    {
                        displayError = "display : block";
                        ErrorMessage = "Doctor has no more available appointment slots for the selected date. Please select another date.";
                    }
                }
                else
                {
                    await AddAppointment();
                }
            }
            else
            {
                displayError = "display : block";
                ErrorMessage = "Selected date is not an available date for the doctor. Please select another date.";
            }
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
            Console.WriteLine(e.InnerException + e.StackTrace + e.Message);
            displayError = "display: block";
        }
    }

    private async Task AddAppointment()
    {
        List<Appointment> SameDateAppts = new List<Appointment>();

        if (okDates)
        {
            foreach (var ad in ApptForDoctor)
            {
                if (appointmentToAdd.startTime.Date.Equals(ad.startTime.Date))
                {
                    SameDateAppts.Add(ad);
                }
            }

            bool validTime = true;
            foreach (var sameDateAppt in SameDateAppts)
            {
                if ((sameDateAppt.startTime.TimeOfDay.TotalMinutes >= appointmentToAdd.startTime.TimeOfDay.TotalMinutes && appointmentToAdd.startTime.TimeOfDay.TotalMinutes < sameDateAppt.endTime.TimeOfDay.TotalMinutes)
                    || (appointmentToAdd.endTime.TimeOfDay.TotalMinutes > sameDateAppt.startTime.TimeOfDay.TotalMinutes && appointmentToAdd.startTime.TimeOfDay.TotalMinutes <= sameDateAppt.startTime.TimeOfDay.TotalMinutes))
                {
                    validTime = false;
                }
            }

            bool found = false;
            foreach (var ap in ApptForPatient)
            {
                if (ap.doctorId == appointmentToAdd.doctorId && ap.startTime.Equals(appointmentToAdd.startTime) &&
                    ap.endTime.Equals(appointmentToAdd.endTime))
                {
                    found = true;
                }
            }

            if (!found)
            {
                if (validTime)
                {
                    displayError = "display: none";
                    display = "display: block";
                    labelContent = "";
                    await CloudAppointmentService.MakeAppointment(appointmentToAdd);
                    if (AvailableDays.Count != 0)
                    {
                        --DoctorDay.AppointmentNr;
                        await CloudAvailableDayService.UpdateAvailableDay(DoctorDay);
                    }
                    MedicalRecord medicalRecord = new MedicalRecord();
                    medicalRecord.patientId = patId;
                    string content = "Entry - NEW APPOINTMENT: \n Appointment number " + appointmentToAdd.id + " : at " + appointmentToAdd.startTime + " until " + appointmentToAdd.endTime +
                                     " made with the doctor with the id " + appointmentToAdd.id + ". Summary/Reason provided by patient: '" + appointmentToAdd.summary +"' \n";
                    medicalRecord.content = Encoding.Default.GetBytes(content);
                    await CloudMedicalRecordService.AddMedicalRecord(medicalRecord);
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    displayError = "display : block";
                    ErrorMessage = "Appointment time reserved! Pick another time!";
                }
            }
            else
            {
                displayError = "display : block";
                ErrorMessage = "Appointment already added!";
    //NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            displayError = "display:block";
            ErrorMessage = "Selected Start and End time do not have the same date or have incorrect times!";
        }
    }

    
}