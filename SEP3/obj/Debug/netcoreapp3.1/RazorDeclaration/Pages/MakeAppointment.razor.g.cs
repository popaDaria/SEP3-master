#pragma checksum "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\Pages\MakeAppointment.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3dcc8957ef94c7f6705fc8fb1c36091ab4eec3a7"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SEP3.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\_Imports.razor"
using SEP3;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\_Imports.razor"
using SEP3.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\Pages\MakeAppointment.razor"
using SEP3.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\Pages\MakeAppointment.razor"
using SEP3.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\Pages\MakeAppointment.razor"
           [Authorize(Roles = "patient")]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/MakeAppointment")]
    public partial class MakeAppointment : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 81 "D:\THIRD SEMESTER\SEP3\SEP3-master-Bogdan - Copy\SEP3\Pages\MakeAppointment.razor"
       
    Appointment appointmentToAdd { get; set; }
    
    string hospitalString { get; set; }
    int hosId { get; set; }
    List<Hospital> allHospitals { get; set; } = new List<Hospital>();
    List<string> allDepartments { get; set; } = new List<string>();
    string deptString { get; set; } 
    
    string display1 { get; set; }
    string display2 { get; set; }
    string display3 { get; set; }
    string display = "display: none";
    string displayError = "display: none";
    public string ErrorMessage { get; set; }
    string labelContent { get; set; } = "";
    
    IList<User> allDoctors { get; set; } = new List<User>();
    string docString { get; set; }
    int docId { get; set; }
    int patId { get; set; }
    List<AvailableDay> AvailableDays { get; set; } = new List<AvailableDay>();
    AvailableDay DoctorDay { get; set; }
    bool ok { get; set; } = false;
    
    List<Appointment> ApptForPatient { get; set; } = new List<Appointment>();
    List<Appointment> ApptForDoctor { get; set; } = new List<Appointment>();

    protected override async Task OnInitializedAsync()
    {
        appointmentToAdd = new Appointment();
        allHospitals = await CloudHospitalService.GetAllHospitals();
        display1 = "display: none";
        display2 = "display: none";
        display3 = "display: none";
        patId = Int32.Parse(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Claims.ToList()[0].Value);
        ApptForPatient = await CloudAppointmentService.GetAllForPatient(patId);
    }

    private async Task SelectHospital()
    {
        hosId = Int32.Parse(hospitalString.Split(" ")[0]);
        allDepartments = await CloudHospitalService.GetAllDepartments(hosId);
        display1 = "display: block";
    }

    private async Task SelectDepartment()
    {
        allDoctors = await CloudDoctorHospitalService.GetAllDoctorsForDepartment(hosId, deptString);
        display2 = "display: block";
    }

    private async Task SelectDoctor()
    {
        docId = Int32.Parse(docString.Split(" ")[0]);
        AvailableDays = await CloudAvailableDayService.GetAvailableDays(docId);
        ApptForDoctor = await CloudAppointmentService.GetAllForDoctor(docId);
        display3 = "display: block";
    //labelContent = "Doctor's schedule:";
        if (AvailableDays.Count == 0)
        {
            displayError = "display : block";
            ErrorMessage = "Warning: The doctor you have selected has no available days registered in the system!";
            ok = true;
        }
        else
        {
            displayError = "display : none";
        }
    }
    
    private void AddLabel(ChangeEventArgs e)
    {
        bool found = false;
    //appointmentToAdd.appointmentDate = (DateTime)e.Value;
        Console.WriteLine(e.Value);
        if (e.Value != null)
        {
            string result = (string) e.Value;
            string[] contents = result.Split("T");
            string[] dateContents = contents[0].Split("-");
            string[] timeContents = contents[1].Split(":");
            appointmentToAdd.startTime = new DateTime(Int32.Parse(dateContents[0]),Int32.Parse(dateContents[1]),Int32.Parse(dateContents[2]), 
                Int32.Parse(timeContents[0]),Int32.Parse(timeContents[1]),0 );
        }
        foreach (var availableDay in AvailableDays)
        {
            if (availableDay.AvailableDate.Day == appointmentToAdd.startTime.Day &&
                availableDay.AvailableDate.Month == appointmentToAdd.startTime.Month &&
                availableDay.AvailableDate.Year == appointmentToAdd.startTime.Year)
            {
                labelContent = "The Working hours are: " + availableDay.StartTime.TimeOfDay.ToString() + " - " + availableDay.EndTime.TimeOfDay.ToString();
                found = true;
            }
        }
        if (!found)
        {
            labelContent = "Not an available date!";
        }
    }
    
    private void SelectEndTime(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            string result = (string) e.Value;
            string[] contents = result.Split("T");
            string[] dateContents = contents[0].Split("-");
            string[] timeContents = contents[1].Split(":");
            appointmentToAdd.endTime = new DateTime(Int32.Parse(dateContents[0]),Int32.Parse(dateContents[1]),Int32.Parse(dateContents[2]), 
                Int32.Parse(timeContents[0]),Int32.Parse(timeContents[1]),0 );
        }    }
    
    private async Task Add()
    {
        try
        {
            appointmentToAdd.doctorId = docId;
            appointmentToAdd.patientId = patId;

            foreach (var availableDay in AvailableDays)
            {
                if (availableDay.AvailableDate.Day == appointmentToAdd.startTime.Day &&
                    availableDay.AvailableDate.Month == appointmentToAdd.startTime.Month &&
                    availableDay.AvailableDate.Year == appointmentToAdd.startTime.Year)
                {
                    ok = true;
                    DoctorDay = availableDay;
                }
            }
            if (ok)
            {
                if (AvailableDays.Count != 0)
                {
                    if (DoctorDay.AppointmentNr != 0)
                    {
                        if (appointmentToAdd.startTime.Hour >= DoctorDay.StartTime.Hour && appointmentToAdd.endTime.Hour < DoctorDay.EndTime.Hour)
                        {
                            await AddAppointment();
                        }
                        else
                        {
                            displayError = "display : block";
                            ErrorMessage = "Selected time does not conform to doctor's schedule. Please select another time.";
                        }
                    }
                    else
                    {
                        displayError = "display : block";
                        ErrorMessage = "Doctor has no more available appointment slots for the selected date. Please select another date.";
                    }
                }
                else
                {
                    await AddAppointment();
                }
            }
            else
            {
                displayError = "display : block";
                ErrorMessage = "Selected date is not an available date for the doctor. Please select another date.";
            }
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
            Console.WriteLine(e.InnerException + e.StackTrace + e.Message);
            displayError = "display: block";
        }
    }

    private async Task AddAppointment()
    {
        List<Appointment> SameDateAppts = new List<Appointment>();
        foreach (var ad in ApptForDoctor)
        {
            if (appointmentToAdd.startTime.Day == ad.startTime.Day || appointmentToAdd.startTime.Month == ad.startTime.Month ||
                appointmentToAdd.startTime.Year == ad.startTime.Year)
            {
                SameDateAppts.Add(ad);
            }
        }
        
        bool validTime = true;
        foreach (var sameDateAppt in SameDateAppts)
        {
            if (sameDateAppt.startTime.Hour == appointmentToAdd.startTime.Hour &&
                sameDateAppt.startTime.Minute == appointmentToAdd.startTime.Minute)
            {
                validTime = false;
            }
        }
        
        bool found = false;
        foreach (var ap in ApptForPatient)
        {
    //todo:look over the logic of this
            if (ap.doctorId == appointmentToAdd.doctorId && ap.startTime.Equals(appointmentToAdd.startTime) &&
                ap.endTime.Equals(appointmentToAdd.endTime))
            {
                found = true;
            }
        }

        if (!found)
        {
            if (validTime)
            {
                displayError = "display: none";
                display = "display: block";
                labelContent = "";
                await CloudAppointmentService.MakeAppointment(appointmentToAdd);
                --DoctorDay.AppointmentNr;
                await CloudAvailableDayService.UpdateAvailableDay(DoctorDay);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                displayError = "display : block";
                ErrorMessage = "Appointment time reserved! Pick another time!";
            }
        }
        else
        {
            displayError = "display : block";
            ErrorMessage = "Appointment already added!";
    //NavigationManager.NavigateTo("/");
        }
    }

    

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICloudAvailableDayService CloudAvailableDayService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICloudUserService CloudUserService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICloudAppointmentService CloudAppointmentService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICloudDoctorHospitalService CloudDoctorHospitalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICloudHospitalService CloudHospitalService { get; set; }
    }
}
#pragma warning restore 1591
